//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CPSCBSOutward.CPSWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Service1Soap", Namespace="http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsAddressAvaiableOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountInfoForCPSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountSignatoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSigImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InwardTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ORETransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback OutwardTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback IRETransactionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = global::CPSCBSOutward.Properties.Settings.Default.CPSCBS_CPSWS_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsAddressAvaiableCompletedEventHandler IsAddressAvaiableCompleted;
        
        /// <remarks/>
        public event QueryTransactionCompletedEventHandler QueryTransactionCompleted;
        
        /// <remarks/>
        public event GetAccountInfoCompletedEventHandler GetAccountInfoCompleted;
        
        /// <remarks/>
        public event GetAccountInfoForCPSCompletedEventHandler GetAccountInfoForCPSCompleted;
        
        /// <remarks/>
        public event GetAccountSignatoriesCompletedEventHandler GetAccountSignatoriesCompleted;
        
        /// <remarks/>
        public event GetSigImageCompletedEventHandler GetSigImageCompleted;
        
        /// <remarks/>
        public event InwardTransactionCompletedEventHandler InwardTransactionCompleted;
        
        /// <remarks/>
        public event ORETransactionCompletedEventHandler ORETransactionCompleted;
        
        /// <remarks/>
        public event OutwardTransactionCompletedEventHandler OutwardTransactionCompleted;
        
        /// <remarks/>
        public event IRETransactionCompletedEventHandler IRETransactionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsAddressAvaiable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ConnectionResult IsAddressAvaiable(string serviceName) {
            object[] results = this.Invoke("IsAddressAvaiable", new object[] {
                        serviceName});
            return ((ConnectionResult)(results[0]));
        }
        
        /// <remarks/>
        public void IsAddressAvaiableAsync(string serviceName) {
            this.IsAddressAvaiableAsync(serviceName, null);
        }
        
        /// <remarks/>
        public void IsAddressAvaiableAsync(string serviceName, object userState) {
            if ((this.IsAddressAvaiableOperationCompleted == null)) {
                this.IsAddressAvaiableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAddressAvaiableOperationCompleted);
            }
            this.InvokeAsync("IsAddressAvaiable", new object[] {
                        serviceName}, this.IsAddressAvaiableOperationCompleted, userState);
        }
        
        private void OnIsAddressAvaiableOperationCompleted(object arg) {
            if ((this.IsAddressAvaiableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAddressAvaiableCompleted(this, new IsAddressAvaiableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueryTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryTransaction(string XREF) {
            object[] results = this.Invoke("QueryTransaction", new object[] {
                        XREF});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryTransactionAsync(string XREF) {
            this.QueryTransactionAsync(XREF, null);
        }
        
        /// <remarks/>
        public void QueryTransactionAsync(string XREF, object userState) {
            if ((this.QueryTransactionOperationCompleted == null)) {
                this.QueryTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryTransactionOperationCompleted);
            }
            this.InvokeAsync("QueryTransaction", new object[] {
                        XREF}, this.QueryTransactionOperationCompleted, userState);
        }
        
        private void OnQueryTransactionOperationCompleted(object arg) {
            if ((this.QueryTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryTransactionCompleted(this, new QueryTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAccountInfo(string AccountNo, string BranchCode) {
            object[] results = this.Invoke("GetAccountInfo", new object[] {
                        AccountNo,
                        BranchCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountInfoAsync(string AccountNo, string BranchCode) {
            this.GetAccountInfoAsync(AccountNo, BranchCode, null);
        }
        
        /// <remarks/>
        public void GetAccountInfoAsync(string AccountNo, string BranchCode, object userState) {
            if ((this.GetAccountInfoOperationCompleted == null)) {
                this.GetAccountInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountInfoOperationCompleted);
            }
            this.InvokeAsync("GetAccountInfo", new object[] {
                        AccountNo,
                        BranchCode}, this.GetAccountInfoOperationCompleted, userState);
        }
        
        private void OnGetAccountInfoOperationCompleted(object arg) {
            if ((this.GetAccountInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountInfoCompleted(this, new GetAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountInfoForCPS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountInfoForCPS(string AccountNo, string BranchCode) {
            object[] results = this.Invoke("GetAccountInfoForCPS", new object[] {
                        AccountNo,
                        BranchCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountInfoForCPSAsync(string AccountNo, string BranchCode) {
            this.GetAccountInfoForCPSAsync(AccountNo, BranchCode, null);
        }
        
        /// <remarks/>
        public void GetAccountInfoForCPSAsync(string AccountNo, string BranchCode, object userState) {
            if ((this.GetAccountInfoForCPSOperationCompleted == null)) {
                this.GetAccountInfoForCPSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountInfoForCPSOperationCompleted);
            }
            this.InvokeAsync("GetAccountInfoForCPS", new object[] {
                        AccountNo,
                        BranchCode}, this.GetAccountInfoForCPSOperationCompleted, userState);
        }
        
        private void OnGetAccountInfoForCPSOperationCompleted(object arg) {
            if ((this.GetAccountInfoForCPSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountInfoForCPSCompleted(this, new GetAccountInfoForCPSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountSignatories", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAccountSignatories(string AccountNo) {
            object[] results = this.Invoke("GetAccountSignatories", new object[] {
                        AccountNo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountSignatoriesAsync(string AccountNo) {
            this.GetAccountSignatoriesAsync(AccountNo, null);
        }
        
        /// <remarks/>
        public void GetAccountSignatoriesAsync(string AccountNo, object userState) {
            if ((this.GetAccountSignatoriesOperationCompleted == null)) {
                this.GetAccountSignatoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountSignatoriesOperationCompleted);
            }
            this.InvokeAsync("GetAccountSignatories", new object[] {
                        AccountNo}, this.GetAccountSignatoriesOperationCompleted, userState);
        }
        
        private void OnGetAccountSignatoriesOperationCompleted(object arg) {
            if ((this.GetAccountSignatoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountSignatoriesCompleted(this, new GetAccountSignatoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSigImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetSigImage(string imgId) {
            object[] results = this.Invoke("GetSigImage", new object[] {
                        imgId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSigImageAsync(string imgId) {
            this.GetSigImageAsync(imgId, null);
        }
        
        /// <remarks/>
        public void GetSigImageAsync(string imgId, object userState) {
            if ((this.GetSigImageOperationCompleted == null)) {
                this.GetSigImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSigImageOperationCompleted);
            }
            this.InvokeAsync("GetSigImage", new object[] {
                        imgId}, this.GetSigImageOperationCompleted, userState);
        }
        
        private void OnGetSigImageOperationCompleted(object arg) {
            if ((this.GetSigImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSigImageCompleted(this, new GetSigImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InwardTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InwardTransaction(
                    string branch, 
                    string XREF, 
                    string HV, 
                    string remAccount, 
                    string benefAccount, 
                    string checkSlNo, 
                    string CCY, 
                    string amount, 
                    string txnDate, 
                    string valDate, 
                    string insDate, 
                    string routingNo, 
                    string txnBrn, 
                    string remBranch, 
                    string instrType, 
                    string reasoncode, 
                    string rejectReason, 
                    string envelop, 
                    string productCode) {
            object[] results = this.Invoke("InwardTransaction", new object[] {
                        branch,
                        XREF,
                        HV,
                        remAccount,
                        benefAccount,
                        checkSlNo,
                        CCY,
                        amount,
                        txnDate,
                        valDate,
                        insDate,
                        routingNo,
                        txnBrn,
                        remBranch,
                        instrType,
                        reasoncode,
                        rejectReason,
                        envelop,
                        productCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InwardTransactionAsync(
                    string branch, 
                    string XREF, 
                    string HV, 
                    string remAccount, 
                    string benefAccount, 
                    string checkSlNo, 
                    string CCY, 
                    string amount, 
                    string txnDate, 
                    string valDate, 
                    string insDate, 
                    string routingNo, 
                    string txnBrn, 
                    string remBranch, 
                    string instrType, 
                    string reasoncode, 
                    string rejectReason, 
                    string envelop, 
                    string productCode) {
            this.InwardTransactionAsync(branch, XREF, HV, remAccount, benefAccount, checkSlNo, CCY, amount, txnDate, valDate, insDate, routingNo, txnBrn, remBranch, instrType, reasoncode, rejectReason, envelop, productCode, null);
        }
        
        /// <remarks/>
        public void InwardTransactionAsync(
                    string branch, 
                    string XREF, 
                    string HV, 
                    string remAccount, 
                    string benefAccount, 
                    string checkSlNo, 
                    string CCY, 
                    string amount, 
                    string txnDate, 
                    string valDate, 
                    string insDate, 
                    string routingNo, 
                    string txnBrn, 
                    string remBranch, 
                    string instrType, 
                    string reasoncode, 
                    string rejectReason, 
                    string envelop, 
                    string productCode, 
                    object userState) {
            if ((this.InwardTransactionOperationCompleted == null)) {
                this.InwardTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInwardTransactionOperationCompleted);
            }
            this.InvokeAsync("InwardTransaction", new object[] {
                        branch,
                        XREF,
                        HV,
                        remAccount,
                        benefAccount,
                        checkSlNo,
                        CCY,
                        amount,
                        txnDate,
                        valDate,
                        insDate,
                        routingNo,
                        txnBrn,
                        remBranch,
                        instrType,
                        reasoncode,
                        rejectReason,
                        envelop,
                        productCode}, this.InwardTransactionOperationCompleted, userState);
        }
        
        private void OnInwardTransactionOperationCompleted(object arg) {
            if ((this.InwardTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InwardTransactionCompleted(this, new InwardTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ORETransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ORETransaction(string branch, string XREF, string txnBrn, string remAccount, string checkSlNo, string routingNo, string reasoncode, string rejectReason) {
            object[] results = this.Invoke("ORETransaction", new object[] {
                        branch,
                        XREF,
                        txnBrn,
                        remAccount,
                        checkSlNo,
                        routingNo,
                        reasoncode,
                        rejectReason});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ORETransactionAsync(string branch, string XREF, string txnBrn, string remAccount, string checkSlNo, string routingNo, string reasoncode, string rejectReason) {
            this.ORETransactionAsync(branch, XREF, txnBrn, remAccount, checkSlNo, routingNo, reasoncode, rejectReason, null);
        }
        
        /// <remarks/>
        public void ORETransactionAsync(string branch, string XREF, string txnBrn, string remAccount, string checkSlNo, string routingNo, string reasoncode, string rejectReason, object userState) {
            if ((this.ORETransactionOperationCompleted == null)) {
                this.ORETransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnORETransactionOperationCompleted);
            }
            this.InvokeAsync("ORETransaction", new object[] {
                        branch,
                        XREF,
                        txnBrn,
                        remAccount,
                        checkSlNo,
                        routingNo,
                        reasoncode,
                        rejectReason}, this.ORETransactionOperationCompleted, userState);
        }
        
        private void OnORETransactionOperationCompleted(object arg) {
            if ((this.ORETransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ORETransactionCompleted(this, new ORETransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OutwardTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OutwardTransaction(
                    string Branch, 
                    string XREF, 
                    string HV, 
                    string RemAccount, 
                    string BenefAccount, 
                    string CheckSlNo, 
                    string CCY, 
                    string Amount, 
                    string TxnDate, 
                    string ValDate, 
                    string InstDate, 
                    string RoutingNo, 
                    string TxnBrn, 
                    string RemBranch, 
                    string InstType, 
                    string ReasonCode, 
                    string RejectReason, 
                    string Envelop, 
                    string ProductCode) {
            object[] results = this.Invoke("OutwardTransaction", new object[] {
                        Branch,
                        XREF,
                        HV,
                        RemAccount,
                        BenefAccount,
                        CheckSlNo,
                        CCY,
                        Amount,
                        TxnDate,
                        ValDate,
                        InstDate,
                        RoutingNo,
                        TxnBrn,
                        RemBranch,
                        InstType,
                        ReasonCode,
                        RejectReason,
                        Envelop,
                        ProductCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OutwardTransactionAsync(
                    string Branch, 
                    string XREF, 
                    string HV, 
                    string RemAccount, 
                    string BenefAccount, 
                    string CheckSlNo, 
                    string CCY, 
                    string Amount, 
                    string TxnDate, 
                    string ValDate, 
                    string InstDate, 
                    string RoutingNo, 
                    string TxnBrn, 
                    string RemBranch, 
                    string InstType, 
                    string ReasonCode, 
                    string RejectReason, 
                    string Envelop, 
                    string ProductCode) {
            this.OutwardTransactionAsync(Branch, XREF, HV, RemAccount, BenefAccount, CheckSlNo, CCY, Amount, TxnDate, ValDate, InstDate, RoutingNo, TxnBrn, RemBranch, InstType, ReasonCode, RejectReason, Envelop, ProductCode, null);
        }
        
        /// <remarks/>
        public void OutwardTransactionAsync(
                    string Branch, 
                    string XREF, 
                    string HV, 
                    string RemAccount, 
                    string BenefAccount, 
                    string CheckSlNo, 
                    string CCY, 
                    string Amount, 
                    string TxnDate, 
                    string ValDate, 
                    string InstDate, 
                    string RoutingNo, 
                    string TxnBrn, 
                    string RemBranch, 
                    string InstType, 
                    string ReasonCode, 
                    string RejectReason, 
                    string Envelop, 
                    string ProductCode, 
                    object userState) {
            if ((this.OutwardTransactionOperationCompleted == null)) {
                this.OutwardTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOutwardTransactionOperationCompleted);
            }
            this.InvokeAsync("OutwardTransaction", new object[] {
                        Branch,
                        XREF,
                        HV,
                        RemAccount,
                        BenefAccount,
                        CheckSlNo,
                        CCY,
                        Amount,
                        TxnDate,
                        ValDate,
                        InstDate,
                        RoutingNo,
                        TxnBrn,
                        RemBranch,
                        InstType,
                        ReasonCode,
                        RejectReason,
                        Envelop,
                        ProductCode}, this.OutwardTransactionOperationCompleted, userState);
        }
        
        private void OnOutwardTransactionOperationCompleted(object arg) {
            if ((this.OutwardTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OutwardTransactionCompleted(this, new OutwardTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IRETransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IRETransaction(string branch, string XREF, string txnBrn, string remAccount, string checkSlNo, string routingNo, string reasoncode, string rejectReason) {
            object[] results = this.Invoke("IRETransaction", new object[] {
                        branch,
                        XREF,
                        txnBrn,
                        remAccount,
                        checkSlNo,
                        routingNo,
                        reasoncode,
                        rejectReason});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IRETransactionAsync(string branch, string XREF, string txnBrn, string remAccount, string checkSlNo, string routingNo, string reasoncode, string rejectReason) {
            this.IRETransactionAsync(branch, XREF, txnBrn, remAccount, checkSlNo, routingNo, reasoncode, rejectReason, null);
        }
        
        /// <remarks/>
        public void IRETransactionAsync(string branch, string XREF, string txnBrn, string remAccount, string checkSlNo, string routingNo, string reasoncode, string rejectReason, object userState) {
            if ((this.IRETransactionOperationCompleted == null)) {
                this.IRETransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIRETransactionOperationCompleted);
            }
            this.InvokeAsync("IRETransaction", new object[] {
                        branch,
                        XREF,
                        txnBrn,
                        remAccount,
                        checkSlNo,
                        routingNo,
                        reasoncode,
                        rejectReason}, this.IRETransactionOperationCompleted, userState);
        }
        
        private void OnIRETransactionOperationCompleted(object arg) {
            if ((this.IRETransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IRETransactionCompleted(this, new IRETransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ConnectionResult {
        
        private bool connectedField;
        
        private string errMsgField;
        
        /// <remarks/>
        public bool Connected {
            get {
                return this.connectedField;
            }
            set {
                this.connectedField = value;
            }
        }
        
        /// <remarks/>
        public string ErrMsg {
            get {
                return this.errMsgField;
            }
            set {
                this.errMsgField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void IsAddressAvaiableCompletedEventHandler(object sender, IsAddressAvaiableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAddressAvaiableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAddressAvaiableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ConnectionResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ConnectionResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void QueryTransactionCompletedEventHandler(object sender, QueryTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetAccountInfoCompletedEventHandler(object sender, GetAccountInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetAccountInfoForCPSCompletedEventHandler(object sender, GetAccountInfoForCPSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountInfoForCPSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountInfoForCPSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetAccountSignatoriesCompletedEventHandler(object sender, GetAccountSignatoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountSignatoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountSignatoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetSigImageCompletedEventHandler(object sender, GetSigImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSigImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSigImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void InwardTransactionCompletedEventHandler(object sender, InwardTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InwardTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InwardTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ORETransactionCompletedEventHandler(object sender, ORETransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ORETransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ORETransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void OutwardTransactionCompletedEventHandler(object sender, OutwardTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OutwardTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OutwardTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void IRETransactionCompletedEventHandler(object sender, IRETransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IRETransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IRETransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591